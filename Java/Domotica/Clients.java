/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package domotica;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author josef
 */class lettore extends Thread
 {
     @Override
    public void run()
    {
          
         try {
             
             String listafunzioni = Clients.fromServer.readLine();
             System.out.println(listafunzioni);
             Clients.caricaFunzioni(listafunzioni);
             
         } catch (IOException ex) {
            
             Logger.getLogger(lettore.class.getName()).log(Level.SEVERE, null, ex);
         }
           
    
    }
 
 }
public final class Clients extends javax.swing.JFrame {
PrintWriter out;
static BufferedReader	fromServer;
static Socket client;
    /**
     * Creates new form Clients
     */
static void caricaFunzioni(String stringa)
{
    boolean isDev=false;
    
     
    String fun1 = null,fun2 = null,fun3 = null,fun4=null,fun5=null;
    if(stringa.charAt(0) =='D') {
        isDev=true;
       
          fun1=stringa.substring(stringa.indexOf('D')+1,stringa.indexOf('$'));
          fun2=stringa.substring(stringa.indexOf('$')+1, stringa.indexOf('째'));
          fun3=stringa.substring(stringa.indexOf('째')+1,stringa.indexOf('&'));
          fun4=stringa.substring(stringa.indexOf('&')+1,stringa.indexOf('!'));
          fun5=stringa.substring(stringa.indexOf('!')+1);
    }else if(stringa.charAt(0) =='F') {
        isDev=false;
          fun1=stringa.substring(stringa.indexOf('F')+1,stringa.indexOf('$'));
          fun2=stringa.substring(stringa.indexOf('$')+1, stringa.indexOf('째'));
          fun3=stringa.substring(stringa.indexOf('째')+1);
    }
   
 
if(isDev){
    Devices.removeAll();  
    Devices.addItem(fun1);
    Devices.addItem(fun2);
    Devices.addItem(fun3);
    Devices.addItem(fun4);
    Devices.addItem(fun5);
}
else{
    Functions.removeAll();
    Functions.addItem(fun1);
    Functions.addItem(fun2);
    Functions.addItem(fun3);
}
}
    public Clients() throws UnknownHostException, IOException {
        initComponents();
       
         client=new Socket("localhost",8088);
         OutputStream output=client.getOutputStream(); 
         out=new PrintWriter(output,true);
        /*invio lista dispositivi connessi*/
       	fromServer = new BufferedReader(new InputStreamReader(client.getInputStream()));   

      lettore l=new lettore();
      l.start();
       
       Devices.addItemListener(new ItemListener()
        {
            @Override
            public void itemStateChanged(ItemEvent e) {
                /*ogni volta che l'utente cambia scelta spediamo al server della casa la scelta e ci mettiamo
                 in ascolto per le funzioni relative alla scelta effettuata*/
             out.println(Devices.getSelectedItem());
            lettore l2=new lettore();
            l2.start();
            }        
        });   
       Functions.addItemListener(new ItemListener()
        {
            @Override
            public void itemStateChanged(ItemEvent e) {
                /*ogni volta che l'utente cambia scelta delle funzioni spediamo al server della casa la scelta*/
             out.println(Functions.getSelectedItem());
           // lettore l2=new lettore();
            //l2.start();
            }        
        });   
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Devices = new java.awt.Choice();
        Functions = new java.awt.Choice();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(Devices, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(Functions, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Functions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Devices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(218, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Clients().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(Clients.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Clients.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static java.awt.Choice Devices;
    public static java.awt.Choice Functions;
    // End of variables declaration//GEN-END:variables
}
